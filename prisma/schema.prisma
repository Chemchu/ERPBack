generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public"]
}

model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

model identities {
  id              String
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  email           String?   @default(dbgenerated("lower((identity_data ->> 'email'::text))"))
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([provider, id])
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("auth")
}

model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

model mfa_challenges {
  id          String      @id @db.Uuid
  factor_id   String      @db.Uuid
  created_at  DateTime    @db.Timestamptz(6)
  verified_at DateTime?   @db.Timestamptz(6)
  ip_address  String      @db.Inet
  mfa_factors mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@schema("auth")
}

model mfa_factors {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  friendly_name  String?
  factor_type    factor_type
  status         factor_status
  created_at     DateTime         @db.Timestamptz(6)
  updated_at     DateTime         @db.Timestamptz(6)
  secret         String?
  mfa_challenges mfa_challenges[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@schema("auth")
}

model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([token])
  @@schema("auth")
}

model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  from_ip_address String?       @db.Inet
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

model schema_migrations {
  version String @id @db.VarChar(255)

  @@schema("auth")
}

model sessions {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  factor_id      String?          @db.Uuid
  aal            aal_level?
  not_after      DateTime?        @db.Timestamptz(6)
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@schema("auth")
}

model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@schema("auth")
}

model users {
  instance_id                 String?       @db.Uuid
  id                          String        @id @db.Uuid
  aud                         String?       @db.VarChar(255)
  role                        String?       @db.VarChar(255)
  email                       String?       @db.VarChar(255)
  encrypted_password          String?       @db.VarChar(255)
  email_confirmed_at          DateTime?     @db.Timestamptz(6)
  invited_at                  DateTime?     @db.Timestamptz(6)
  confirmation_token          String?       @db.VarChar(255)
  confirmation_sent_at        DateTime?     @db.Timestamptz(6)
  recovery_token              String?       @db.VarChar(255)
  recovery_sent_at            DateTime?     @db.Timestamptz(6)
  email_change_token_new      String?       @db.VarChar(255)
  email_change                String?       @db.VarChar(255)
  email_change_sent_at        DateTime?     @db.Timestamptz(6)
  last_sign_in_at             DateTime?     @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?     @db.Timestamptz(6)
  updated_at                  DateTime?     @db.Timestamptz(6)
  phone                       String?       @unique
  phone_confirmed_at          DateTime?     @db.Timestamptz(6)
  phone_change                String?       @default("")
  phone_change_token          String?       @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?     @db.Timestamptz(6)
  confirmed_at                DateTime?     @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current  String?       @default("") @db.VarChar(255)
  email_change_confirm_status Int?          @default(0) @db.SmallInt
  banned_until                DateTime?     @db.Timestamptz(6)
  reauthentication_token      String?       @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?     @db.Timestamptz(6)
  is_sso_user                 Boolean       @default(false)
  deleted_at                  DateTime?     @db.Timestamptz(6)
  identities                  identities[]
  mfa_factors                 mfa_factors[]
  sessions                    sessions[]

  @@index([instance_id])
  @@schema("auth")
}

model Albaran {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  numFactura       String             @unique
  valorTotal       Float
  createdAt        DateTime           @default(now()) @db.Timestamptz(0)
  updatedAt        DateTime           @db.Timestamptz(0)
  proveedorId      String             @db.Uuid
  Proveedor        Proveedor          @relation(fields: [proveedorId], references: [id])
  ProductoComprado ProductoComprado[]

  @@schema("public")
}

model Cliente {
  id             String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombreCompleto String  @unique
  nif            String  @unique
  telefono       String? @unique
  direccion      String?
  pais           String?
  codigoPostal   String?
  Venta          Venta[]

  @@schema("public")
}

model Contacto {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre       String
  dni          String?
  email        String?
  telefono     String?
  direccion    String?
  pais         String?
  codigoPostal String?
  proveedorId  String?    @db.Uuid
  Proveedor    Proveedor? @relation(fields: [proveedorId], references: [id])

  @@schema("public")
}

model Producto {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre       String    @unique
  familia      String
  proveedorId  String    @db.Uuid
  codigosEan   String[]  @unique
  precioCompra Float
  precioVenta  Float
  iva          Float
  cantidad     Float     @default(0)
  alta         Boolean   @default(true)
  createdAt    DateTime  @default(now()) @db.Timestamptz(0)
  updatedAt    DateTime  @db.Timestamptz(0)
  Proveedor    Proveedor @relation(fields: [proveedorId], references: [id])

  @@schema("public")
}

model ProductoComprado {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre           String    @unique
  familia          String
  proveedorId      String    @db.Uuid
  codigosEan       String[]  @unique
  precioCompra     Float
  iva              Float
  dto              Float
  cantidadComprada Float     @default(0)
  albaranId        String?   @db.Uuid
  createdAt        DateTime  @default(now()) @db.Timestamptz(0)
  updatedAt        DateTime  @db.Timestamptz(0)
  Albaran          Albaran?  @relation(fields: [albaranId], references: [id])
  Proveedor        Proveedor @relation(fields: [proveedorId], references: [id])

  @@schema("public")
}

model ProductoVendido {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre           String    @unique
  familia          String
  proveedorId      String    @db.Uuid
  codigosEan       String[]  @unique
  precioCompra     Float
  precioVenta      Float
  precioVentaFinal Float
  iva              Float
  dto              Float
  cantidadVendida  Float     @default(0)
  alta             Boolean   @default(true)
  ventaId          String?   @db.Uuid
  Proveedor        Proveedor @relation(fields: [proveedorId], references: [id])
  Venta            Venta?    @relation(fields: [ventaId], references: [id])

  @@schema("public")
}

model Proveedor {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre           String             @unique
  cif              String             @unique
  telefono         String?
  direccion        String?
  pais             String?
  codigoPostal     String?
  Albaran          Albaran[]
  Contacto         Contacto[]
  Producto         Producto[]
  ProductoComprado ProductoComprado[]
  ProductoVendido  ProductoVendido[]

  @@schema("public")
}

model Tpv {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre    String   @unique
  libre     Boolean
  createdAt DateTime @default(now()) @db.Timestamptz(0)
  updatedAt DateTime @db.Timestamptz(0)
  Venta     Venta[]

  @@schema("public")
}

model Venta {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clienteId        String            @db.Uuid
  tipo             String
  valorTotalSinDto Float
  valorTotalPagado Float
  pagadoEnEfectivo Float
  pagadoEnTarjeta  Float
  cambio           Float
  dtoPorcentaje    Float
  dtoDinero        Float
  createdAt        DateTime          @default(now()) @db.Timestamptz(0)
  updatedAt        DateTime          @db.Timestamptz(0)
  tpvId            String            @db.Uuid
  ProductoVendido  ProductoVendido[]
  Cliente          Cliente           @relation(fields: [clienteId], references: [id])
  Tpv              Tpv               @relation(fields: [tpvId], references: [id])

  @@schema("public")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn

  @@schema("auth")
}
